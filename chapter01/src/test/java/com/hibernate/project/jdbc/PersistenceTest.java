package com.hibernate.project.jdbc;

import static org.testng.Assert.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.hibernate.project.pojo.MessageEntity;

public class PersistenceTest {
    
    Connection getConnection() throws SQLException {
        return DriverManager.getConnection("jdbc:h2:./db1", "sa", "");
    }


    @BeforeClass
    public void setup() {
        final String DROP = "drop table messages if exists";
        final String CREATE = """
                create table messages (
                    id bigint generated by default as identity primary key,
                    text varchar(256) not null
                );
                """;
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement(DROP)) {
                ps.execute();
            }
            try (PreparedStatement ps = connection.prepareStatement(CREATE)) {
                ps.execute();
            }
        } catch (SQLException q) {
            q.printStackTrace();
            throw new RuntimeException(q);
        }
    }
    public MessageEntity saveMessage(String text) {
        final String INSERT = "insert into messages(text) values (?)";
        MessageEntity message = null;
        try (Connection connection = getConnection()) {
            try(PreparedStatement ps = connection.prepareStatement(INSERT, Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, text);
                ps.execute();
                try (ResultSet keys = ps.getGeneratedKeys()) {
                    if (!keys.next()) {
                        throw new SQLException("No generated keys");
                    }
                    message = new MessageEntity(keys.getLong(1), text);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return message;
    }

    @Test
    public void readMessage() {
        final String text = "Hello, World!";

        MessageEntity message = saveMessage(text);
        final String SELECT = "select id, text from messages";
        List<MessageEntity> list = new ArrayList<>();
        try(Connection con = getConnection();
            PreparedStatement ps = con.prepareStatement(SELECT);
            ResultSet res = ps.executeQuery()) {

                while(res.next()) {
                    MessageEntity mes = new MessageEntity();
                    mes.setId(res.getLong(1));
                    mes.setText(res.getString(2));
                    list.add(mes);
                }

        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        assertEquals(list.size(), 1);
        for(MessageEntity m : list) {
            System.out.println(m);
        }
        assertEquals(list.get(0), message);
    }
}
